/*
 * MainFrame.java
 *
 * Created on January 12, 2008, 8:19 PM
 */

package eu2posed;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  Michael
 */
public class MainFrame extends javax.swing.JFrame {
    
    private boolean unsavedChanges = false;
    
    /** Creates new form MainFrame */
    public MainFrame(IdTbl idTbl, BoundboxTbl bounds) {
        initComponents();
        mapPanel.setIdTbl(idTbl);
        mapPanel.setBoundbox(bounds);
        mapPanel.repaint();
        pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        mapScrollPane = new javax.swing.JScrollPane();
        mapPanel = new eu2posed.IDMapPanel();
        javax.swing.JMenuBar jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu viewMenu = new javax.swing.JMenu();
        zoomInMenuItem = new javax.swing.JMenuItem();
        zoomOutMenuItem = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("EU2 Positions Editor");
        addWindowListener(formListener);

        jPanel1.setLayout(new java.awt.BorderLayout());

        statusLabel.setText(" ");
        jPanel1.add(statusLabel, java.awt.BorderLayout.SOUTH);

        mapPanel.addMouseListener(formListener);
        mapPanel.addMouseMotionListener(formListener);
        mapScrollPane.setViewportView(mapPanel);

        jPanel1.add(mapScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(formListener);
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        viewMenu.setMnemonic('V');
        viewMenu.setText("View");

        zoomInMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        zoomInMenuItem.setMnemonic('i');
        zoomInMenuItem.setText("Zoom in");
        zoomInMenuItem.addActionListener(formListener);
        viewMenu.add(zoomInMenuItem);

        zoomOutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        zoomOutMenuItem.setMnemonic('o');
        zoomOutMenuItem.setText("Zoom out");
        zoomOutMenuItem.setDisplayedMnemonicIndex(5);
        zoomOutMenuItem.addActionListener(formListener);
        viewMenu.add(zoomOutMenuItem);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener, java.awt.event.WindowListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == exitMenuItem) {
                MainFrame.this.exitMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == zoomInMenuItem) {
                MainFrame.this.zoomInMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == zoomOutMenuItem) {
                MainFrame.this.zoomOutMenuItemActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == mapPanel) {
                MainFrame.this.mapPanelMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void mouseDragged(java.awt.event.MouseEvent evt) {
        }

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == mapPanel) {
                MainFrame.this.mapPanelMouseMoved(evt);
            }
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == MainFrame.this) {
                MainFrame.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        doClose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void mapPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseMoved
        int ID = mapPanel.getProvId(evt.getX(), evt.getY());
        statusLabel.setText(mapPanel.getIdTbl().getProvinceData().getName(ID) + " (" + ID + ")");
    }//GEN-LAST:event_mapPanelMouseMoved

    private void zoomOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutMenuItemActionPerformed
        mapPanel.zoomOut();
        System.out.println(mapPanel.getScaleFactor());
        mapPanel.repaint();
        mapScrollPane.setViewport(mapScrollPane.getViewport());
}//GEN-LAST:event_zoomOutMenuItemActionPerformed

    private void zoomInMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInMenuItemActionPerformed
        mapPanel.zoomIn();
        System.out.println(mapPanel.getScaleFactor());
        mapPanel.repaint();
        mapScrollPane.setViewport(mapScrollPane.getViewport());
    }//GEN-LAST:event_zoomInMenuItemActionPerformed

    private void mapPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseClicked
        if (evt.getClickCount() == 2) {
            int id = mapPanel.getProvId(evt.getX(), evt.getY());
            if (id <= 0 || id >= ProvinceData.NUM_PROVINCES)
                return;
            if (mapPanel.getProvince(id) == null)
                return;
            EditorDialog dialog = new EditorDialog(this, mapPanel.createImage(id), mapPanel.getProvince(id));
            dialog.setVisible(true);
            if (dialog.hasChanges()) {
                unsavedChanges = true;
                mapPanel.repaint();
            }
        }
    }//GEN-LAST:event_mapPanelMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        doClose();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem exitMenuItem;
    eu2posed.IDMapPanel mapPanel;
    javax.swing.JScrollPane mapScrollPane;
    javax.swing.JLabel statusLabel;
    javax.swing.JMenuItem zoomInMenuItem;
    javax.swing.JMenuItem zoomOutMenuItem;
    // End of variables declaration//GEN-END:variables
    
    private void doClose() {
        if (unsavedChanges) {
            int choice = JOptionPane.showConfirmDialog(this, "You have unsaved changes. Would you like to save them now?\n(You will get the opportunity to choose a location if you accept.)");
            if (choice == JOptionPane.NO_OPTION) {
                dispose();
            } else if (choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
            JFileChooser chooser = new JFileChooser();
            int choice2 = chooser.showSaveDialog(this);
            if (choice2 == JFileChooser.APPROVE_OPTION) {
                if (chooser.getSelectedFile().getName().endsWith(".csv")) {
                    mapPanel.getIdTbl().getProvinceData().saveCsv(chooser.getSelectedFile().getAbsolutePath());
                } else {
                    mapPanel.getIdTbl().getProvinceData().saveTxt(chooser.getSelectedFile().getAbsolutePath());
                }
            } else {
                return;
            }
        }
        
        dispose();
    }
}
